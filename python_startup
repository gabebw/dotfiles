# vim: set ft=python syntax=python
# Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# export PYTHONSTARTUP=<path-to-this-file>
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.

import atexit
import os
import readline
import rlcompleter
import platform

historyPath = os.path.expanduser("~/.pyhistory")
# use Tab for completion. Doesn't work with Apple-provided Python.
readline.parse_and_bind('tab: complete')

if platform.system() == 'Darwin':
    # Mac OS X
    # Via: http://stackoverflow.com/questions/675370/tab-completion-in-python-interpreter-in-os-x-terminal
    # This assumes you're not using the Apple-provided Python, which has a
    # broken readline. And readline.__doc__ doesn't help.

    class IrlCompleter(rlcompleter.Completer):
        """
        This class enables a "tab" insertion if there's no text for
        completion.

        The default "tab" is four spaces. You can initialize with '\t' as
        the tab if you wish to use a genuine tab.

        """

        def __init__(self, tab=' ' * 4):
            self.tab = tab
            rlcompleter.Completer.__init__(self)

        def complete(self, text, state):
            if text == '':
                readline.insert_text(self.tab)
                return None
            else:
                return rlcompleter.Completer.complete(self,text,state)

    # you could change this line to bind another key instead tab.
    readline.set_completer(IrlCompleter('\t').complete)

def save_history(historyPath=historyPath):
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    if hasattr(readline, "read_history_file"):
        try:
            readline.read_history_file(historyPath)
        except IOError as ioe:
            print("ERROR reading {0} (Detail: {1})".format(historyPath, ioe))

atexit.register(save_history)
del os, atexit, save_history, historyPath, platform
