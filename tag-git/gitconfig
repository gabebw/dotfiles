# vim: syntax=gitconfig filetype=gitconfig
[user]
  # Try per-repo .gitconfig instead
  name = Gabe Berke-Williams
  email = gabebw@gabebw.com
[core]
  editor = nvim
  whitespace = trailing-space,cr-at-eol
  excludesfile = ~/.gitignore
  autocrlf = false
  attributesfile = ~/.gitattributes
[merge]
  tool = Kaleidoscope
  # Per @jferris: `ff = only` means Git will never implicitly do a merge commit, including while
  # doing git pull. If I'm unexpectedly out of sync when I git pull, I get this
  # message:
  # fatal: Not possible to fast-forward, aborting.
  # At that point, I know that I've forgotten to do something in my normal
  # workflow, and I retrace my steps.
  ff = only

  # Use zdiff3 ("Zealous Diff3"), which is better at moving common, unchanged
  # regions outside of the diff: https://stackoverflow.com/a/70387424
  # (zdiff3 is in Git >= 2.35)
  conflictStyle = zdiff3
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  # Turn on an experimental heuristic that should make the diff easier to read
  compactionHeuristic = true
  # Show moved lines differently from added/deleted lines
  # https://twitter.com/SmileyKeith/status/946789768506912773
  colorMoved = zebra

  # Turn off all prefixes so that I can Cmd-Click a path in the VS Code
  # terminal. `i/tag-git/gitconfig` won't resolve, but `tag-git/gitconfig` will.
  noprefix = true

  # https://adamj.eu/tech/2024/01/18/git-improve-diff-histogram/
  algorithm = histogram
[diff "rspec"]
  # https://gist.github.com/tekin/12500956bd56784728e490d8cef9cb81?permalink_comment_id=3500150#gistcomment-3500150
  xfuncname = "^[ \t]*((RSpec|describe|context|it|before|after|around|feature|scenario|background)[ \t].*)$"
[diff "exif"]
  binary = true
  # brew install exiftool
  # Git will then diff between `exiftool file1` and `exiftool file2`
  textconv = exiftool
[alias]
  ksd = difftool -t Kaleidoscope
  # `git log` with patches shown with difftastic.
  dl = -c diff.external=difft log -p --ext-diff
  # Show the most recent commit with difftastic.
  ds = -c diff.external=difft show --ext-diff
  # `git diff` with difftastic.
  dft = -c diff.external=difft diff

  mt = mergetool
  cf = checkout -f
  full = log --pretty=detailed
  # No color, short messages
  basic = log --pretty='%h %s'
  unstage = reset HEAD
  redo = !git reset --soft HEAD~1 && git unstage
  mm = master-to-main-wrapper merge-to %BRANCH%
  up = !git fetch origin && git master-to-main-wrapper rebase origin/%BRANCH%
  r = master-to-main-wrapper rebase -i origin/%BRANCH%
  rr = master-to-main-wrapper rebase -i $(git shalector)
  cp = !git cherry-pick $(git recent-branch)
  newauthor = commit --amend --reset-author -C HEAD
  next = !git add . && git rebase --continue
  pr = !git push -u -q && git create-pull-request
  prf = !git pf -u && git create-pull-request
  # The advantage of --force-with-lease over --force is that it won't push if
  # you haven't already seen the ref you're overwriting. It avoids the race
  # condition of accidentally "push -f"ing over a commit you haven't seen.
  pf = push --force-with-lease --set-upstream
  safe = !mkdir .git/safe
  current-branch = branch --show-current
  mb = master-to-main-wrapper merge-base head %BRANCH%
  # Delete merged branches
  cleanup-merged = !git branch --merged | rg -v '^\\*|^  (master|main)$' | xargs git branch -d
  # Try to open a PR for the current branch; otherwise, open the main repo page
  open = !gh pr view --web 2>/dev/null || gh repo view --web

  # Typos
  pul = pull
  psuh = push
[format]
  # git log uses --pretty format by default, so this changes the default
  # format.
  # Example:
  # 9d9a0ee curl: automatically continue downloads [Gabe Berke-Williams, 9 days ago] (HEAD -> main)
  pretty = %C(magenta reverse)%h%C(reset) %C(blue)%s %C(magenta)[%an, %cr]%C(auto)%d
[pretty]
  # Formats here can be used by doing `--pretty=<NAME>`.
  # You cannot redefine the same name as a built-in format, which means you
  # can't use: oneline, short, medium, full, fuller, reference, email, mboxrd,
  # or email.

  # Full commit messages without all the junk from `--pretty=full`
  detailed = %C(red)%H%nAuthor: %C(green)%an%n%C(magenta)%s%n%b
[svn]
  authorsfile = ~/.git-author

# insteadOf lets you do `git clone tb:dotfiles`
[url "git@github.com:thoughtbot/"]
  # thoughtbot, with write access
  insteadOf = tb:
[url "git@github.com:gabebw/"]
  # moi, with write access
  insteadOf = gbw:
[push]
  # Push current branch (and ONLY current branch) even if you've never pushed it
  # before.
  default = current
[status]
  # In `git status`, show all files underneath a new directory when the
  # directory is untracked. Or, in other words, don't show untracked directories
  # as a single line.
  showUntrackedFiles = all
[rerere]
  enabled = 1
[credential]
  helper = osxkeychain
[commit]
  cleanup = scissors
  verbose = true
[grep]
  # http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
  extendRegexp = true
  lineNumber = true
[fetch]
  prune = true
[gh]
  autoUpdate = never
[color]
  # Color everything.
  ui = auto
[color "diff"]
  # Color syntax: <foreground> <background>
  # So "normal red" is normal foreground, red background
  # BUT bold is a modifier, so "bold green red" means
  #   "bold green" foreground, red background
  whitespace = red reverse
  plain = brightblack
  meta = cyan
  frag = magenta bold
  old = red
  new = green
  commit = yellow
[color "status"]
  # Options:
  # header: the header text of the status message
  # added/updated: added but not committed
  # changed: changed but not added in the index
  # untracked
  # nobranch: the color the "no branch" warning is shown in (default red)
  added = yellow # files deleted with "git rm" are this color too
  changed = green # deleted items NOT done with "git rm" are this color too
  untracked = cyan
[init]
  templatedir = ~/.git-template
  defaultBranch = main
[github]
  user = gabebw
[rebase]
  autosquash = true
  # Automatically stash before rebasing. This makes it possible to rebase with
  # changes in the repo.
  autostash = true
[include]
  path = ~/.gitconfig.local
[branch]
  sort = -committerdate
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[pull]
  ff = only
[advice]
  detachedHead = false
[pager]
  # Use a pager if the difftool output is larger than one screenful,
  # consistent with the behaviour of `git diff`.
  difftool = true
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool]
  prompt = false
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[mergetool]
  keepBackup = false
  prompt = false
