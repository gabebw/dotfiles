#!/usr/bin/env fish -N
# vim: syntax=fish

# Finds a script file, shell alias, or shell function and prints its
# location, including a the line number. The line number is always included for
# consistency, even if it's just "1" (i.e. start at the top, just like the
# default).
#
# Usage:
#
#     $ find-location-of myalias
#     /Users/gabe/.config/fish/config.fish:32
#
#     $ find-location-of git-merge-to
#     /Users/gabe/code/personal/dotfiles/tag-git/bin/git-merge-to:1
#
#     $ find-location-of time
#     time is a shell builtin
#     [printed to STDERR]
#     [exits 1]

# My fish config file will autoconnect to tmux before running the rest of the
# script unless this is set.
set -x DO_NOT_AUTOCONNECT_TO_TMUX 1

set FISH_CONFIG_FILE ~/.config/fish/config.fish

source $FISH_CONFIG_FILE

function handle_unknown_command -a cmd
  echo "\"$cmd\" is not recognized as a script, function, or alias" >&2
  exit 1
end

function definition_type -a cmd
  switch (type -t $cmd)
  case "function"
    set -f typeinfo (type -a $cmd)
    if string match -q -e -- "--description 'alias" $typeinfo
      echo "alias"
    else if string match -q -e -- "function with definition" $typeinfo
      echo function
    else
      echo "not found"
    end
  case builtin
    echo "builtin"
  case file
    echo "script"
  case "*"
    echo "not found"
  end
end

function find_script -a cmd
  set -f script_path (realpath $(which $cmd))
  echo $script_path:1
end

function find_shell_function -a funcname
  set -f typeinfo (type -a $funcname)
  # "Defined in /Users/gabe/.config/fish/config.fish @ line 2"
  string match -rq "Defined in (?P<filename>[^ ]+) @ line (?P<line_number>\d+)" $typeinfo
  echo $filename:$line_number
end

function find_shell_alias -a funcname
  rg --no-filename -n "alias $funcname " $FISH_CONFIG_FILE | string match -r -q -g '^(?P<line_number>\d+)'
  # I know that all aliases are in $FISH_CONFIG_FILE
  # There's no rule about it, I just know that I do that.
  echo "$FISH_CONFIG_FILE:$line_number"
end

if [ (count $argv) -eq 0 ]
  echo "No argument given" >&2
  exit 1
else
  set -l command_name $argv[1]
  switch (definition_type $command_name)
    case "alias"
      find_shell_alias $command_name
    case "function"
      find_shell_function $command_name
    case "builtin"
      echo "$command_name is a shell builtin" >&2
      exit 1
    case "script"
      find_script $command_name
    case "not found"
      handle_unknown_command $command_name
  end
end
