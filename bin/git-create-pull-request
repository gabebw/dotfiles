#!/usr/bin/env ruby

# This script:
# * creates a file with all of the commits since origin/main
# * Adds the pull request template (if it exists) above the list of commits
# * intelligently reflows each commit's body to not have linebreaks (so that
#   the PR looks better on GitHub, which keeps hard linebreaks)
# * opens the file in Vim for further editing
# * creates a PR with that description
# * copies the PR's url to the clipboard
# * opens the PR in the browser
#
# Whew!

require "open3"
require "redcarpet"
require "tempfile"

# An arbitrary string that's unlikely to occur in commits, used in the `git log`
# format so that we can split on it later.
COMMIT_MARKER = "---MARKER---".freeze

# Intelligently removes hard line breaks:
# * Doesn't touch code blocks
# * Reflows paragraphs
# * Reflows list items while preserving nested lists
# * Reflows blockquotes
class RenderMarkdownWithOneLineParagraphs < Redcarpet::Render::Base
  def block_code(code, language)
    <<~CODE
    ```#{language}
    #{code.strip}
    ```

    CODE
  end

  def block_quote(quote)
    "\n> #{unwrapped(quote.strip)}"
  end

  def block_html(raw_html)
    raw_html
  end

  def footnotes(content)
    content
  end

  def footnote_def(content, number)
    content
  end

  def header(text, header_level)
    # Avoid prefixing with "#" because `hub` will remove lines with that prefix.
    if header_level == 1
      "#{text}\n===========\n\n"
    elsif header_level == 2
      "#{text}\n-----------\n\n"
    else
      # Not sure what else to do here, honestly.
      marker = "#" * header_level
      "#{marker} #{text}\n\n"
    end
  end

  def hrule
    "--------------------------"
  end

  def list(contents, list_type)
    "#{contents}\n"
  end

  def list_item(text, list_type)
    marker = case list_type
             when :unordered
               "*"
             when :ordered
               "1."
             end
    text.gsub!(/^(\*|\d\.)\s*(?<body>[^\n]+\n)/) do
      body = Regexp.last_match[:body]
      "  #{marker} #{unwrapped(body)}\n"
    end
    text = text.gsub(/\n(?!\s+#{Regexp.escape(marker)})/, " ").strip
    "#{marker} #{text}\n"
  end

  def paragraph(text)
    "#{unwrapped(text)}\n\n"
  end

  def table(header, body)
    header_boundary = header.gsub(/[^|]/, "-")
    "#{header}\n#{header_boundary}\n#{body}\n"
  end

  def table_row(content)
    "|#{content}"
  end

  def table_cell(content, alignment)
    " #{content} |"
  end

  private

  def unwrapped(text)
    text.strip.gsub("\n", " ").strip
  end
end

class Markdown
  def initialize
    @renderer = Redcarpet::Markdown.new(
      RenderMarkdownWithOneLineParagraphs,
      fenced_code_blocks: true,
      tables: true,
    )
  end

  def render(text)
    renderer.render(text)
  end

  private

  attr_reader :renderer
end

class PRTemplate
  def possible_body
    if pull_request_template
      "\n" + reformat(pull_request_template)
    else
      ""
    end
  end

  private

  def pull_request_template
    if pull_request_template_path
      File.read(pull_request_template_path)
    end
  end

  def pull_request_template_path
    @pull_request_template_path = files.detect { |file| File.readable?(file) }
  end

  def files
    Dir["PULL_REQUEST_TEMPLATE*", ".github/PULL_REQUEST_TEMPLATE*"]
  end

  def reformat(text)
    Markdown.new.render(text).strip
  end
end

class CommitMessageBuilder
  def initialize(repo)
    @number_of_commits = repo.number_of_commits
    @pr_template = PRTemplate.new
    @repo = repo
  end

  def build
    # Reflow each commit message, since reflowing the entire text leads to weird
    # results.
    markdown = Markdown.new
    message = commit_message.split(/^#{COMMIT_MARKER}/).
      map { |commit| markdown.render(commit) }.
      join("---------------------\n"). # turns into an <hr>
      strip
  end

  private

  attr_reader :number_of_commits, :pr_template, :repo

  def commit_message
    if number_of_commits == 1
      single_commit_message
    else
      multi_commit_message
    end
  end

  def multi_commit_message
    <<~MESSAGE
      # Descriptive title goes here
      #{pr_template.possible_body}
      #{repo.fancy_log_of_all_commits_since_main}
    MESSAGE
  end

  def single_commit_message
    <<~MESSAGE
      #{repo.first_commit_full_message}
      #{pr_template.possible_body}
    MESSAGE
  end
end

class Repo
  def initialize
    @current_branch = git("rev-parse --abbrev-ref HEAD")
  end

  attr_reader :current_branch

  def fancy_log_of_all_commits_since_main
    fancy_format = "#{COMMIT_MARKER}%n(%aN, %ar)%n%n%w(78)%s%n%+b"
    git "master-to-main-wrapper log --format='#{fancy_format}' origin/%BRANCH%..HEAD"
  end

  def number_of_commits
    git("master-to-main-wrapper rev-list origin/%BRANCH%..HEAD --count").to_i
  end

  def first_commit_subject
    git "log -1 --format=%s"
  end

  def first_commit_body
    git "log -1 --format=%b"
  end

  def first_commit_full_message
    git "log -1 --format=%B"
  end

  def on_master_branch?
    current_branch == "master"
  end

  def on_main_branch?
    current_branch == "main"
  end

  private

  def git(command)
    run "git #{command}"
  end

  def run(command)
    `#{command}`.strip
  end
end

repo = Repo.new

if repo.on_main_branch? || repo.on_master_branch?
  STDERR.puts "\n!!! You're already on #{current_branch}"
  exit 1
end

commit_message_file = Tempfile.new("commit_message_file")
commit_message = CommitMessageBuilder.new(repo).build
File.open(commit_message_file, "w") { |f| f.write(commit_message) }

hub_pull_request = "hub pull-request -e -o -F '#{commit_message_file.path}'"
if ! system(hub_pull_request)
  # Vim exited abnormally, which always means I did it intentionally with `:cq`
  # and don't want to create the PR.
  puts "OK, not creating PR :)"
end
